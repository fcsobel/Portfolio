// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portfolio.Data.Context;

namespace Portfolio.Data.Context.Migrations
{
    [DbContext(typeof(PortfolioContext))]
    partial class PortfolioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Portfolio.Data.Model.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Portfolio.Data.Model.Investment", b =>
                {
                    b.Property<long>("InvestmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<int>("InvestmentType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19, 3)");

                    b.Property<bool>("ReInvest")
                        .HasColumnType("bit");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("InvestmentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("StockId");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("Portfolio.Data.Model.LoginProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId", "ProviderName");

                    b.ToTable("LoginProfiles");
                });

            modelBuilder.Entity("Portfolio.Data.Model.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AverageTradingVolume10Day")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<DateTime?>("CacheDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Dividend")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal?>("DividendGrowthRate5Y")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal?>("DividendPerShare5Y")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal?>("DividendPerShareAnnual")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal?>("DividendYield5Y")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal?>("DividendYieldIndicatedAnnual")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal?>("DividendsPerShareTTM")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<DateTime?>("HighDate_52Week")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("High_52Week")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<DateTime?>("LowDate_52Week")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Low_52Week")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal?>("PriceReturnDaily13Week")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal?>("PriceReturnDaily26Week")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<int>("PriceTargetAnalysts")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceTargetAverage")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal>("PriceTargetHigh")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<decimal>("PriceTargetLow")
                        .HasColumnType("decimal(19, 5)");

                    b.Property<DateTime>("PriceTargetUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Portfolio.Data.Model.StockDividend", b =>
                {
                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Dividend")
                        .HasColumnType("decimal(19, 4)");

                    b.HasKey("StockId", "Date");

                    b.ToTable("StockDividends");
                });

            modelBuilder.Entity("Portfolio.Data.Model.StockPrice", b =>
                {
                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("StockId", "Date");

                    b.ToTable("StockPrice");
                });

            modelBuilder.Entity("Portfolio.Data.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Portfolio.Data.Model.Account", b =>
                {
                    b.HasOne("Portfolio.Data.Model.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Portfolio.Data.Model.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Data.Model.Investment", b =>
                {
                    b.HasOne("Portfolio.Data.Model.Account", "Account")
                        .WithMany("Investments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portfolio.Data.Model.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Data.Model.LoginProfile", b =>
                {
                    b.HasOne("Portfolio.Data.Model.User", "User")
                        .WithMany("LoginProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Data.Model.StockDividend", b =>
                {
                    b.HasOne("Portfolio.Data.Model.Stock", null)
                        .WithMany("Dividends")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portfolio.Data.Model.StockPrice", b =>
                {
                    b.HasOne("Portfolio.Data.Model.Stock", null)
                        .WithMany("PriceHistory")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
